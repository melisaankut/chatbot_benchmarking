from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction
from rouge_score import rouge_scorer
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

# Example test data
data = [
    {"reference": "I am doing great, thank you!", "generated": "I'm doing well, thanks!"},
    {"reference": "The weather is nice today.", "generated": "It's sunny today."},
    {"reference": "I love playing soccer on weekends.", "generated": "On weekends, I enjoy playing football."}
]

# Load Sentence Embedding model
embedder = SentenceTransformer('all-MiniLM-L6-v2')

def exact_match(ref, gen):
    return int(ref.strip().lower() == gen.strip().lower())

def bleu_score(ref, gen):
    smoothie = SmoothingFunction().method4
    return sentence_bleu([ref.split()], gen.split(), smoothing_function=smoothie)

def rouge_scores(ref, gen):
    scorer = rouge_scorer.RougeScorer(['rouge1', 'rougeL'], use_stemmer=True)
    return scorer.score(ref, gen)

def cosine_sim(ref, gen):
    embeddings = embedder.encode([ref, gen])
    return cosine_similarity([embeddings[0]], [embeddings[1]])[0][0]

# Run evaluation
print("Evaluation Results:\n")
for i, item in enumerate(data):
    ref = item["reference"]
    gen = item["generated"]
    
    print(f"Example {i+1}:")
    print(f"Reference : {ref}")
    print(f"Generated : {gen}")
    
    print(f"Exact Match     : {exact_match(ref, gen)}")
    print(f"BLEU Score      : {bleu_score(ref, gen):.4f}")
    
    rouge = rouge_scores(ref, gen)
    print(f"ROUGE-1 Recall  : {rouge['rouge1'].recall:.4f}")
    print(f"ROUGE-L Recall  : {rouge['rougeL'].recall:.4f}")
    
    print(f"Cosine Similarity : {cosine_sim(ref, gen):.4f}")
    print("-" * 50)